{"uid":"50fc050b0a77d7b4","name":"test_front_size_grip[200-100]","fullName":"tests.gui.test_front#test_front_size_grip","historyId":"bf883eb90b81d28287d53e5bf0be2213","time":{"start":1666002895359,"stop":1666002897033,"duration":1674},"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = 200, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(DEFAULT_APP_REGION,\n                                             SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[1], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(False)\n\ntests/gui/test_front.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666002894237,"stop":1666002895356,"duration":1119},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666002895357,"stop":1666002895357,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = 200, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(DEFAULT_APP_REGION,\n                                             SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[1], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(False)\n\ntests/gui/test_front.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","steps":[{"name":"Take a screenshot","time":{"start":1666002895359,"stop":1666002896114,"duration":755},"status":"passed","steps":[],"attachments":[{"uid":"90a6134f6754f35d","name":"Screenshot","source":"90a6134f6754f35d.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click and drag by SizeGrip","time":{"start":1666002896114,"stop":1666002896344,"duration":230},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666002896344,"stop":1666002897004,"duration":660},"status":"passed","steps":[],"attachments":[{"uid":"7f9b0a5d75fb761c","name":"Screenshot","source":"7f9b0a5d75fb761c.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666002897004,"stop":1666002897033,"duration":29},"status":"broken","statusMessage":"AttributeError: TXT\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 101, in test_front_size_grip\n    assert_screenshots(False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 46, in assert_screenshots\n    assert images_are_similar(*screenshots) == same\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 17, in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py\", line 429, in __getattr__\n    raise AttributeError(name) from None\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666002897184,"stop":1666002897288,"duration":104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window size changes by SizeGrip"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az133-672"},{"name":"thread","value":"2822-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"200"},{"name":"offset_y","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"8cadc3b17279d32e","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/8cadc3b17279d32e","status":"failed","statusDetails":"AssertionError","time":{"start":1666002217022,"stop":1666002218886,"duration":1864}},{"uid":"b29b09a2418ca138","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/b29b09a2418ca138","status":"failed","statusDetails":"AssertionError","time":{"start":1666001772220,"stop":1666001773905,"duration":1685}}]},"tags":[]},"source":"50fc050b0a77d7b4.json","parameterValues":["200","100"]}