{"uid":"5c66c3c2e0044896","name":"test_front_size_grip[-200--100]","fullName":"tests.gui.test_front#test_front_size_grip","historyId":"d40223867281eb4394e1bd6d12e46db6","time":{"start":1666002898405,"stop":1666002900229,"duration":1824},"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = -200, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(DEFAULT_APP_REGION,\n                                             SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[1], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(False)\n\ntests/gui/test_front.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666002897291,"stop":1666002898403,"duration":1112},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666002898403,"stop":1666002898404,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = -200, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(DEFAULT_APP_REGION,\n                                             SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[1], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(False)\n\ntests/gui/test_front.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","steps":[{"name":"Take a screenshot","time":{"start":1666002898405,"stop":1666002899175,"duration":770},"status":"passed","steps":[],"attachments":[{"uid":"e25c6e6163fc5d62","name":"Screenshot","source":"e25c6e6163fc5d62.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click and drag by SizeGrip","time":{"start":1666002899175,"stop":1666002899386,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666002899386,"stop":1666002900163,"duration":777},"status":"passed","steps":[],"attachments":[{"uid":"d260d4a795c29d96","name":"Screenshot","source":"d260d4a795c29d96.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666002900163,"stop":1666002900228,"duration":65},"status":"broken","statusMessage":"AttributeError: TXT\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 101, in test_front_size_grip\n    assert_screenshots(False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 46, in assert_screenshots\n    assert images_are_similar(*screenshots) == same\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 17, in images_are_similar\n    allure.attach(str(diff), \"diff\", allure.attachment_type.TXT)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py\", line 429, in __getattr__\n    raise AttributeError(name) from None\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666002900562,"stop":1666002900663,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window size changes by SizeGrip"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az133-672"},{"name":"thread","value":"2822-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"-200"},{"name":"offset_y","value":"-100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"a1e55bbc54c6fc8d","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/a1e55bbc54c6fc8d","status":"failed","statusDetails":"AssertionError","time":{"start":1666002220183,"stop":1666002222228,"duration":2045}},{"uid":"f4bccede7c61f639","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/f4bccede7c61f639","status":"failed","statusDetails":"AssertionError","time":{"start":1666001779179,"stop":1666001780927,"duration":1748}}]},"tags":[]},"source":"5c66c3c2e0044896.json","parameterValues":["-200","-100"]}