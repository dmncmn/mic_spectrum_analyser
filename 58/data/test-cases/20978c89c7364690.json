{"uid":"20978c89c7364690","name":"test_front_draggable_window[0-100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"6a5fe09545d07edc40eff2c4ba24eaf3","time":{"start":1666003372360,"stop":1666003373000,"duration":640},"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = 0, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), name=\"diff\", attachment_type=allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666003371252,"stop":1666003372357,"duration":1105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666003372358,"stop":1666003372358,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"AttributeError: TXT","statusTrace":"setup = None, teardown = None, offset_x = 0, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:46: in assert_screenshots\n    assert images_are_similar(*screenshots) == same\ntests/methods/utils.py:17: in images_are_similar\n    allure.attach(str(diff), name=\"diff\", attachment_type=allure.attachment_type.TXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'AttachmentType'>, name = 'TXT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: TXT\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py:429: AttributeError","steps":[{"name":"Take a screenshot","time":{"start":1666003372361,"stop":1666003372534,"duration":173},"status":"passed","steps":[],"attachments":[{"uid":"7fd55d73365c9050","name":"Screenshot","source":"7fd55d73365c9050.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666003372534,"stop":1666003372741,"duration":207},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666003372741,"stop":1666003372910,"duration":169},"status":"passed","steps":[],"attachments":[{"uid":"aa2501a8626f079d","name":"Screenshot","source":"aa2501a8626f079d.png","type":"image/png","size":4680}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666003372911,"stop":1666003372920,"duration":9},"status":"broken","statusMessage":"AttributeError: TXT\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 35, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 46, in assert_screenshots\n    assert images_are_similar(*screenshots) == same\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 17, in images_are_similar\n    allure.attach(str(diff), name=\"diff\", attachment_type=allure.attachment_type.TXT)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/enum.py\", line 429, in __getattr__\n    raise AttributeError(name) from None\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666003373070,"stop":1666003373172,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az508-948"},{"name":"thread","value":"3074-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"0"},{"name":"offset_y","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"2e637d0e46498fdf","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/57//#testresult/2e637d0e46498fdf","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666002876676,"stop":1666002877316,"duration":640}},{"uid":"c5377a100b3574e7","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/c5377a100b3574e7","status":"failed","statusDetails":"AssertionError","time":{"start":1666002197360,"stop":1666002197909,"duration":549}},{"uid":"32dfd1717f4f35d3","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/32dfd1717f4f35d3","status":"failed","statusDetails":"AssertionError","time":{"start":1666001718219,"stop":1666001718739,"duration":520}}]},"tags":[]},"source":"20978c89c7364690.json","parameterValues":["0","100"]}