{"uid":"38be9d91f04fa0d1","name":"test_front_draggable_window[-100--100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"1399db857f8fe126e6b9a41b744bfb44","time":{"start":1666003563789,"stop":1666003564693,"duration":904},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = -100, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:48: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) == same\nE           AssertionError\n\ntests/methods/utils.py:46: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666003562681,"stop":1666003563787,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666003563787,"stop":1666003563788,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = -100, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:48: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) == same\nE           AssertionError\n\ntests/methods/utils.py:46: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666003563789,"stop":1666003564139,"duration":350},"status":"passed","steps":[],"attachments":[{"uid":"5494dfa6be11c76","name":"Screenshot","source":"5494dfa6be11c76.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666003564139,"stop":1666003564345,"duration":206},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666003564346,"stop":1666003564666,"duration":320},"status":"passed","steps":[],"attachments":[{"uid":"aead9b8f99dc0a70","name":"Screenshot","source":"aead9b8f99dc0a70.png","type":"image/png","size":1346}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666003564667,"stop":1666003564692,"duration":25},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 35, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 48, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 46, in assert_screenshots\n    assert images_are_similar(*screenshots) == same\n","steps":[],"attachments":[{"uid":"a51a7556c568b4ed","name":"diff","source":"a51a7556c568b4ed.txt","type":"text/plain","size":18}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666003564709,"stop":1666003564810,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az502-785"},{"name":"thread","value":"2887-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"-100"},{"name":"offset_y","value":"-100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"d3ad87e83eb1df92","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/58//#testresult/d3ad87e83eb1df92","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666003381920,"stop":1666003382691,"duration":771}},{"uid":"108cb7b76f3c4063","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/57//#testresult/108cb7b76f3c4063","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666002885813,"stop":1666002886636,"duration":823}},{"uid":"3c6f36204bffffd0","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/3c6f36204bffffd0","status":"failed","statusDetails":"AssertionError","time":{"start":1666002206510,"stop":1666002207430,"duration":920}},{"uid":"83bace3d42ac014f","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/83bace3d42ac014f","status":"failed","statusDetails":"AssertionError","time":{"start":1666001747079,"stop":1666001747787,"duration":708}}]},"tags":[]},"source":"38be9d91f04fa0d1.json","parameterValues":["-100","-100"]}