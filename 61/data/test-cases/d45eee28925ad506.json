{"uid":"d45eee28925ad506","name":"test_front_draggable_window[100-100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"64ce08f1262f067d1e7d0431f29c930f","time":{"start":1666004537747,"stop":1666004538243,"duration":496},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 100, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666004536641,"stop":1666004537745,"duration":1104},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666004537746,"stop":1666004537746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 100, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666004537747,"stop":1666004537889,"duration":142},"status":"passed","steps":[],"attachments":[{"uid":"1c6cfeb1b4e94556","name":"Screenshot","source":"1c6cfeb1b4e94556.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666004537889,"stop":1666004538093,"duration":204},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666004538093,"stop":1666004538234,"duration":141},"status":"passed","steps":[],"attachments":[{"uid":"5e294c6057c0fae4","name":"Screenshot","source":"5e294c6057c0fae4.png","type":"image/png","size":3030}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666004538234,"stop":1666004538242,"duration":8},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 35, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 45, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 43, in assert_screenshots\n    assert images_are_similar(*screenshots) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666004538250,"stop":1666004538351,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az139-609"},{"name":"thread","value":"2910-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"100"},{"name":"offset_y","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"5e86f7094393a0ea","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/60//#testresult/5e86f7094393a0ea","status":"failed","statusDetails":"AssertionError","time":{"start":1666004091092,"stop":1666004091637,"duration":545}},{"uid":"4c3055dffdc25d57","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/59//#testresult/4c3055dffdc25d57","status":"failed","statusDetails":"AssertionError","time":{"start":1666003558207,"stop":1666003558766,"duration":559}},{"uid":"f13c52c56084e811","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/58//#testresult/f13c52c56084e811","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666003376062,"stop":1666003376639,"duration":577}},{"uid":"e247afc3ed1f58e","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/57//#testresult/e247afc3ed1f58e","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666002880329,"stop":1666002880835,"duration":506}},{"uid":"6f0c44777e3bca4d","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/6f0c44777e3bca4d","status":"failed","statusDetails":"AssertionError","time":{"start":1666002200925,"stop":1666002201493,"duration":568}},{"uid":"acd210320b90fbd1","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/acd210320b90fbd1","status":"failed","statusDetails":"AssertionError","time":{"start":1666001729699,"stop":1666001730210,"duration":511}}]},"tags":[]},"source":"d45eee28925ad506.json","parameterValues":["100","100"]}