{"uid":"fdd5286802633390","name":"test_front_draggable_window[100-0]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"b6711e0406fcb5a7d3775963fac36bd6","time":{"start":1666004536053,"stop":1666004536530,"duration":477},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 100, offset_y = 0\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666004534943,"stop":1666004536051,"duration":1108},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666004536052,"stop":1666004536052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 100, offset_y = 0\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666004536053,"stop":1666004536187,"duration":134},"status":"passed","steps":[],"attachments":[{"uid":"f05127e3bf5b92e9","name":"Screenshot","source":"f05127e3bf5b92e9.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666004536187,"stop":1666004536390,"duration":203},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666004536391,"stop":1666004536522,"duration":131},"status":"passed","steps":[],"attachments":[{"uid":"62e4fb6878296087","name":"Screenshot","source":"62e4fb6878296087.png","type":"image/png","size":3031}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666004536522,"stop":1666004536530,"duration":8},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 35, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 45, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 43, in assert_screenshots\n    assert images_are_similar(*screenshots) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666004536537,"stop":1666004536639,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az139-609"},{"name":"thread","value":"2910-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"100"},{"name":"offset_y","value":"0"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"e7764aaaa3c4c280","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/60//#testresult/e7764aaaa3c4c280","status":"failed","statusDetails":"AssertionError","time":{"start":1666004089359,"stop":1666004089872,"duration":513}},{"uid":"a954c914989d9d19","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/59//#testresult/a954c914989d9d19","status":"failed","statusDetails":"AssertionError","time":{"start":1666003556455,"stop":1666003556984,"duration":529}},{"uid":"e636065f0945f990","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/58//#testresult/e636065f0945f990","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666003374281,"stop":1666003374822,"duration":541}},{"uid":"dfb6e1ad3f375631","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/57//#testresult/dfb6e1ad3f375631","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666002878589,"stop":1666002879096,"duration":507}},{"uid":"65cd09a65da4c480","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/65cd09a65da4c480","status":"failed","statusDetails":"AssertionError","time":{"start":1666002199158,"stop":1666002199701,"duration":543}},{"uid":"3c1b7f44fb1f5afe","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/3c1b7f44fb1f5afe","status":"failed","statusDetails":"AssertionError","time":{"start":1666001723986,"stop":1666001724473,"duration":487}}]},"tags":[]},"source":"fdd5286802633390.json","parameterValues":["100","0"]}