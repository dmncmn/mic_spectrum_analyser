{"uid":"5187621901d37e4c","name":"test_front_draggable_window[0--100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"f193cb8c329388ec1167c4f306515536","time":{"start":1666005101127,"stop":1666005101773,"duration":646},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 0, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666005100020,"stop":1666005101125,"duration":1105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"teardown","time":{"start":1666005101126,"stop":1666005101126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, teardown = None, offset_x = 0, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, teardown, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(DEFAULT_APP_REGION,\n                                              DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(DEFAULT_APP_REGION, DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(DEFAULT_APP_REGION, (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool):\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666005101128,"stop":1666005101347,"duration":219},"status":"passed","steps":[],"attachments":[{"uid":"15f86dc9920c7592","name":"Screenshot","source":"15f86dc9920c7592.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666005101347,"stop":1666005101551,"duration":204},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666005101552,"stop":1666005101763,"duration":211},"status":"passed","steps":[],"attachments":[{"uid":"996766e3db0c46af","name":"Screenshot","source":"996766e3db0c46af.png","type":"image/png","size":1352}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666005101763,"stop":1666005101772,"duration":9},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 35, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 45, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 43, in assert_screenshots\n    assert images_are_similar(*screenshots) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"teardown::0","time":{"start":1666005101804,"stop":1666005101911,"duration":107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az204-107"},{"name":"thread","value":"3005-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"0"},{"name":"offset_y","value":"-100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"16481dd872739328","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/62//#testresult/16481dd872739328","status":"failed","statusDetails":"AssertionError","time":{"start":1666004889764,"stop":1666004890467,"duration":703}},{"uid":"e20a98cd537cdb2a","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/61//#testresult/e20a98cd537cdb2a","status":"failed","statusDetails":"AssertionError","time":{"start":1666004539461,"stop":1666004540016,"duration":555}},{"uid":"baf550329dcc790f","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/60//#testresult/baf550329dcc790f","status":"failed","statusDetails":"AssertionError","time":{"start":1666004092859,"stop":1666004093466,"duration":607}},{"uid":"9e42f322c04ac436","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/59//#testresult/9e42f322c04ac436","status":"failed","statusDetails":"AssertionError","time":{"start":1666003559988,"stop":1666003560607,"duration":619}},{"uid":"cd538554d47f827","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/58//#testresult/cd538554d47f827","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666003377882,"stop":1666003378582,"duration":700}},{"uid":"3262ec4fb727d59b","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/57//#testresult/3262ec4fb727d59b","status":"broken","statusDetails":"AttributeError: TXT","time":{"start":1666002882069,"stop":1666002882617,"duration":548}},{"uid":"6d13708d6a64295d","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/56//#testresult/6d13708d6a64295d","status":"failed","statusDetails":"AssertionError","time":{"start":1666002202714,"stop":1666002203310,"duration":596}},{"uid":"6853efbd77f4bf84","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/55//#testresult/6853efbd77f4bf84","status":"failed","statusDetails":"AssertionError","time":{"start":1666001735438,"stop":1666001735986,"duration":548}}]},"tags":[]},"source":"5187621901d37e4c.json","parameterValues":["0","-100"]}