{"uid":"814959bd33fe76e4","name":"test_front_draggable_window[0-100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"6a5fe09545d07edc40eff2c4ba24eaf3","time":{"start":1666104535444,"stop":1666104535991,"duration":547},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 0, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666104534328,"stop":1666104535434,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 0, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img = pyautogui.screenshot(screenshots[0], region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(True)\n\ntests/gui/test_front.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:45: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsame = True\n\n    def assert_screenshots(same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n>           assert images_are_similar(*screenshots) is same\nE           AssertionError\n\ntests/methods/utils.py:43: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666104535444,"stop":1666104535616,"duration":172},"status":"passed","steps":[],"attachments":[{"uid":"664a388aa05da7c4","name":"Screenshot","source":"664a388aa05da7c4.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666104535617,"stop":1666104535821,"duration":204},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666104535821,"stop":1666104535982,"duration":161},"status":"passed","steps":[],"attachments":[{"uid":"999c5788e22f4faa","name":"Screenshot","source":"999c5788e22f4faa.png","type":"image/png","size":4680}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666104535982,"stop":1666104535990,"duration":8},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 37, in test_front_draggable_window\n    assert_screenshots(True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 45, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 43, in assert_screenshots\n    assert images_are_similar(*screenshots) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666104536029,"stop":1666104536029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az571-172"},{"name":"thread","value":"2845-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"0"},{"name":"offset_y","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":5},"items":[{"uid":"4fe805dcb04fa426","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/4fe805dcb04fa426","status":"failed","statusDetails":"AssertionError","time":{"start":1666104152616,"stop":1666104153116,"duration":500}},{"uid":"a6d7b393a2d99fc1","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/a6d7b393a2d99fc1","status":"passed","time":{"start":1666031121467,"stop":1666031122006,"duration":539}},{"uid":"d11ae52624d1d1a5","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/d11ae52624d1d1a5","status":"passed","time":{"start":1666030968568,"stop":1666030969060,"duration":492}},{"uid":"56d3f30f190f6311","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/56d3f30f190f6311","status":"passed","time":{"start":1666030669799,"stop":1666030670292,"duration":493}}]},"tags":[]},"source":"814959bd33fe76e4.json","parameterValues":["0","100"]}