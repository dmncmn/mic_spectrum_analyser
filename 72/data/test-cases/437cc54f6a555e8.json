{"uid":"437cc54f6a555e8","name":"test_front_size_grip[-200--100]","fullName":"tests.gui.test_front#test_front_size_grip","historyId":"d40223867281eb4394e1bd6d12e46db6","time":{"start":1666105803328,"stop":1666105803881,"duration":553},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = -200, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                             p.SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F064400>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F064F10>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105802220,"stop":1666105803326,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = -200, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                             p.SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F064400>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F064F10>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666105803329,"stop":1666105803495,"duration":166},"status":"passed","steps":[],"attachments":[{"uid":"f3bb955eacc8575","name":"Screenshot","source":"f3bb955eacc8575.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click and drag by SizeGrip","time":{"start":1666105803495,"stop":1666105803700,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105803700,"stop":1666105803862,"duration":162},"status":"passed","steps":[],"attachments":[{"uid":"7d6b99e0e04f5896","name":"Screenshot","source":"7d6b99e0e04f5896.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105803862,"stop":1666105803880,"duration":18},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 110, in test_front_size_grip\n    assert_screenshots(img_1, img_2, False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105803891,"stop":1666105803891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window size changes by SizeGrip"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"-200"},{"name":"offset_y","value":"-100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"7e2aa6df0891a40c","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/7e2aa6df0891a40c","status":"failed","statusDetails":"AssertionError","time":{"start":1666104551972,"stop":1666104552508,"duration":536}},{"uid":"77d9b4cb7d4fdc15","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/77d9b4cb7d4fdc15","status":"failed","statusDetails":"AssertionError","time":{"start":1666104168564,"stop":1666104169057,"duration":493}},{"uid":"23758ba4be8cd5f5","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/23758ba4be8cd5f5","status":"passed","time":{"start":1666031144399,"stop":1666031146589,"duration":2190}},{"uid":"488ffa41cc00c05","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/488ffa41cc00c05","status":"passed","time":{"start":1666030989128,"stop":1666030990842,"duration":1714}},{"uid":"31814a4016b37df1","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/31814a4016b37df1","status":"passed","time":{"start":1666030690019,"stop":1666030691600,"duration":1581}}]},"tags":[]},"source":"437cc54f6a555e8.json","parameterValues":["-200","-100"]}