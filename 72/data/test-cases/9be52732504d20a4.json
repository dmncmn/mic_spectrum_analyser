{"uid":"9be52732504d20a4","name":"test_front_draggable_window[0--100]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"f193cb8c329388ec1167c4f306515536","time":{"start":1666105791669,"stop":1666105792221,"duration":552},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 0, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img_2 = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, True)\n\ntests/gui/test_front.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F248670>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F04B640>\nsame = True\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105790562,"stop":1666105791667,"duration":1105},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 0, offset_y = -100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img_2 = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, True)\n\ntests/gui/test_front.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F248670>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F04B640>\nsame = True\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666105791670,"stop":1666105791834,"duration":164},"status":"passed","steps":[],"attachments":[{"uid":"322465ccac92f324","name":"Screenshot","source":"322465ccac92f324.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666105791835,"stop":1666105792040,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105792040,"stop":1666105792205,"duration":165},"status":"passed","steps":[],"attachments":[{"uid":"d598bd92eeb7a6ea","name":"Screenshot","source":"d598bd92eeb7a6ea.png","type":"image/png","size":1352}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105792205,"stop":1666105792221,"duration":16},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 38, in test_front_draggable_window\n    assert_screenshots(img_1, img_2, True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105792231,"stop":1666105792233,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"0"},{"name":"offset_y","value":"-100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"f580749de1c45be","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/f580749de1c45be","status":"failed","statusDetails":"AssertionError","time":{"start":1666104540466,"stop":1666104541007,"duration":541}},{"uid":"52402cf10502a47c","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/52402cf10502a47c","status":"failed","statusDetails":"AssertionError","time":{"start":1666104157472,"stop":1666104157952,"duration":480}},{"uid":"54ebee96e1b903eb","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/54ebee96e1b903eb","status":"passed","time":{"start":1666031126775,"stop":1666031127435,"duration":660}},{"uid":"8f5d0148e55f3c3a","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/8f5d0148e55f3c3a","status":"passed","time":{"start":1666030973672,"stop":1666030974207,"duration":535}},{"uid":"8ca14af2ab3a68c7","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/8ca14af2ab3a68c7","status":"passed","time":{"start":1666030674913,"stop":1666030675429,"duration":516}}]},"tags":[]},"source":"9be52732504d20a4.json","parameterValues":["0","-100"]}