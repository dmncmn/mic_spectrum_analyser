{"uid":"a52da795f408a1b9","name":"test_front_size_grip[200-100]","fullName":"tests.gui.test_front#test_front_size_grip","historyId":"bf883eb90b81d28287d53e5bf0be2213","time":{"start":1666105801628,"stop":1666105802208,"duration":580},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 200, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                             p.SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F04B820>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045790>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105800517,"stop":1666105801626,"duration":1109},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = 200, offset_y = 100\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window size changes by SizeGrip')\n    @pytest.mark.parametrize(\"offset_x, offset_y\", [(200, 100), (-200, -100)])\n    def test_front_size_grip(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click and drag by SizeGrip\"):\n            size_grip_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                             p.SIZE_GRIP_CLICK_POINT)\n            pyautogui.moveTo(size_grip_pos)\n            pyautogui.dragTo(get_new_position(size_grip_pos, (offset_x, offset_y)))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F04B820>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045790>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666105801628,"stop":1666105801811,"duration":183},"status":"passed","steps":[],"attachments":[{"uid":"84b03b6d77aef4f1","name":"Screenshot","source":"84b03b6d77aef4f1.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click and drag by SizeGrip","time":{"start":1666105801811,"stop":1666105802016,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105802016,"stop":1666105802188,"duration":172},"status":"passed","steps":[],"attachments":[{"uid":"8b866b9814effc6f","name":"Screenshot","source":"8b866b9814effc6f.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105802188,"stop":1666105802207,"duration":19},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 110, in test_front_size_grip\n    assert_screenshots(img_1, img_2, False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105802217,"stop":1666105802217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window size changes by SizeGrip"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"200"},{"name":"offset_y","value":"100"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"12bb07ebf138d1d5","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/12bb07ebf138d1d5","status":"failed","statusDetails":"AssertionError","time":{"start":1666104550312,"stop":1666104550854,"duration":542}},{"uid":"4c6ba76838867667","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/4c6ba76838867667","status":"failed","statusDetails":"AssertionError","time":{"start":1666104166965,"stop":1666104167447,"duration":482}},{"uid":"7e4ec9ab59fd312a","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/7e4ec9ab59fd312a","status":"passed","time":{"start":1666031141190,"stop":1666031143150,"duration":1960}},{"uid":"5f90916be4dd8bcb","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/5f90916be4dd8bcb","status":"passed","time":{"start":1666030986242,"stop":1666030987895,"duration":1653}},{"uid":"4f75ed127b8bba99","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/4f75ed127b8bba99","status":"passed","time":{"start":1666030687088,"stop":1666030688772,"duration":1684}}]},"tags":[]},"source":"a52da795f408a1b9.json","parameterValues":["200","100"]}