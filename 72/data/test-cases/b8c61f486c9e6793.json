{"uid":"b8c61f486c9e6793","name":"test_front_draggable_window[-100-0]","fullName":"tests.gui.test_front#test_front_draggable_window","historyId":"f19de7574ec40d9d418b2307e5d88893","time":{"start":1666105793345,"stop":1666105793890,"duration":545},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = -100, offset_y = 0\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img_2 = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, True)\n\ntests/gui/test_front.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A335E0>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A33A60>\nsame = True\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105792236,"stop":1666105793343,"duration":1107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, offset_x = -100, offset_y = 0\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window is moved by holding down '\n                  'the left mouse button')\n    @pytest.mark.parametrize(\"offset_x, offset_y\",\n                             [(0, 100), (100, 0), (100, 100),\n                              (0, -100), (-100, 0), (-100, -100)])\n    def test_front_draggable_window(setup, offset_x, offset_y):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Drag window to new position\"):\n            pyautogui.moveTo(get_new_position(p.DEFAULT_APP_REGION,\n                                              p.DEFAULT_CLICK_POINT))\n            cursor_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                          p.DEFAULT_CLICK_POINT)\n            cursor_pos = get_new_position(cursor_pos, (offset_x, offset_y))\n            pyautogui.dragTo(cursor_pos)\n    \n        with allure.step(\"Take a screenshot\"):\n            new_app_pos = get_new_position(p.DEFAULT_APP_REGION,\n                                           (offset_x, offset_y))\n            img_2 = pyautogui.screenshot(screenshots[1], region=new_app_pos)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, True)\n\ntests/gui/test_front.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A335E0>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A33A60>\nsame = True\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666105793345,"stop":1666105793511,"duration":166},"status":"passed","steps":[],"attachments":[{"uid":"7409ff46a5e8e73e","name":"Screenshot","source":"7409ff46a5e8e73e.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Drag window to new position","time":{"start":1666105793511,"stop":1666105793716,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105793717,"stop":1666105793873,"duration":156},"status":"passed","steps":[],"attachments":[{"uid":"99053d7fb0fecbf2","name":"Screenshot","source":"99053d7fb0fecbf2.png","type":"image/png","size":4591}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105793873,"stop":1666105793889,"duration":16},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 38, in test_front_draggable_window\n    assert_screenshots(img_1, img_2, True)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105793900,"stop":1666105793900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window is moved by holding down the left mouse button"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"offset_x","value":"-100"},{"name":"offset_y","value":"0"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"5f997eb9d449ff72","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/5f997eb9d449ff72","status":"failed","statusDetails":"AssertionError","time":{"start":1666104542125,"stop":1666104542672,"duration":547}},{"uid":"a84bb24b038657a7","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/a84bb24b038657a7","status":"failed","statusDetails":"AssertionError","time":{"start":1666104159072,"stop":1666104159554,"duration":482}},{"uid":"61e5e0408a1e8a9a","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/61e5e0408a1e8a9a","status":"passed","time":{"start":1666031128653,"stop":1666031129379,"duration":726}},{"uid":"ee59306340068893","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/ee59306340068893","status":"passed","time":{"start":1666030975421,"stop":1666030976030,"duration":609}},{"uid":"733d57ecd89aaee8","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/733d57ecd89aaee8","status":"passed","time":{"start":1666030676647,"stop":1666030677236,"duration":589}}]},"tags":[]},"source":"b8c61f486c9e6793.json","parameterValues":["-100","0"]}