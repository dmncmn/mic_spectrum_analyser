{"uid":"ba5e6e652721f1fe","name":"test_front_close_button","fullName":"tests.gui.test_front#test_front_close_button","historyId":"c16507a92b07ae1962ba5aef5ceb8172","time":{"start":1666105796721,"stop":1666105797166,"duration":445},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window closes by click the close button')\n    def test_front_close_button(setup):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click the close button\"):\n            pyautogui.click(get_new_position(p.DEFAULT_APP_REGION,\n                                             p.CLOSE_BUTTON_CLICK_POINT))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045C10>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045940>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105795612,"stop":1666105796719,"duration":1107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window closes by click the close button')\n    def test_front_close_button(setup):\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Click the close button\"):\n            pyautogui.click(get_new_position(p.DEFAULT_APP_REGION,\n                                             p.CLOSE_BUTTON_CLICK_POINT))\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045C10>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F045940>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Take a screenshot","time":{"start":1666105796721,"stop":1666105796883,"duration":162},"status":"passed","steps":[],"attachments":[{"uid":"661f2b221a89d75a","name":"Screenshot","source":"661f2b221a89d75a.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click the close button","time":{"start":1666105796883,"stop":1666105796986,"duration":103},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105796986,"stop":1666105797150,"duration":164},"status":"passed","steps":[],"attachments":[{"uid":"8e513397ed99964b","name":"Screenshot","source":"8e513397ed99964b.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105797150,"stop":1666105797165,"duration":15},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 60, in test_front_close_button\n    assert_screenshots(img_1, img_2, False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105797174,"stop":1666105797175,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Check that the window closes by click the close button"},{"name":"feature","value":"Test front"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"39fc34243ec29386","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/39fc34243ec29386","status":"failed","statusDetails":"AssertionError","time":{"start":1666104545447,"stop":1666104545884,"duration":437}},{"uid":"65ef38b798bef2da","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/65ef38b798bef2da","status":"failed","statusDetails":"AssertionError","time":{"start":1666104162265,"stop":1666104162646,"duration":381}},{"uid":"6c7fb3e3596d0bfa","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/6c7fb3e3596d0bfa","status":"passed","time":{"start":1666031132730,"stop":1666031134000,"duration":1270}},{"uid":"9f60923a85359580","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/9f60923a85359580","status":"passed","time":{"start":1666030979204,"stop":1666030979992,"duration":788}},{"uid":"96d6a33063c682fb","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/96d6a33063c682fb","status":"passed","time":{"start":1666030680333,"stop":1666030681027,"duration":694}}]},"tags":[]},"source":"ba5e6e652721f1fe.json","parameterValues":[]}