{"uid":"e316cdae7e54d742","name":"test_front_change_opacity_up_down[-1]","fullName":"tests.gui.test_front#test_front_change_opacity_up_down","historyId":"51a0de81d8e990ac93ff97f7425f1659","time":{"start":1666105798285,"stop":1666105798831,"duration":546},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, up_down = -1\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window opacity changes by wheel')\n    @pytest.mark.parametrize(\"up_down\", [-1, 1])\n    def test_front_change_opacity_up_down(setup, up_down):\n    \n        with allure.step(\"Change opacity to -1\"):\n            pyautogui.scroll(-1)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Scroll\"):\n            pyautogui.scroll(up_down)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A32220>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A321F0>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105797177,"stop":1666105798283,"duration":1106},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, up_down = -1\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window opacity changes by wheel')\n    @pytest.mark.parametrize(\"up_down\", [-1, 1])\n    def test_front_change_opacity_up_down(setup, up_down):\n    \n        with allure.step(\"Change opacity to -1\"):\n            pyautogui.scroll(-1)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Scroll\"):\n            pyautogui.scroll(up_down)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A32220>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB550A321F0>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Change opacity to -1","time":{"start":1666105798285,"stop":1666105798387,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105798387,"stop":1666105798551,"duration":164},"status":"passed","steps":[],"attachments":[{"uid":"21d1a41c319b7ee1","name":"Screenshot","source":"21d1a41c319b7ee1.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Scroll","time":{"start":1666105798551,"stop":1666105798653,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105798653,"stop":1666105798815,"duration":162},"status":"passed","steps":[],"attachments":[{"uid":"610ab701a6a23e15","name":"Screenshot","source":"610ab701a6a23e15.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105798815,"stop":1666105798831,"duration":16},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 85, in test_front_change_opacity_up_down\n    assert_screenshots(img_1, img_2, False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":5,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105798839,"stop":1666105798840,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window opacity changes by wheel"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"up_down","value":"-1"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"37d7443ae43024d4","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/37d7443ae43024d4","status":"failed","statusDetails":"AssertionError","time":{"start":1666104547002,"stop":1666104547537,"duration":535}},{"uid":"c08501f42142f836","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/c08501f42142f836","status":"failed","statusDetails":"AssertionError","time":{"start":1666104163764,"stop":1666104164245,"duration":481}},{"uid":"d9427e62c09a4434","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/d9427e62c09a4434","status":"passed","time":{"start":1666031135135,"stop":1666031136765,"duration":1630}},{"uid":"cf7c8b0eb4c0f1b2","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/cf7c8b0eb4c0f1b2","status":"passed","time":{"start":1666030981101,"stop":1666030982270,"duration":1169}},{"uid":"be75553cbdb7997d","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/be75553cbdb7997d","status":"passed","time":{"start":1666030682138,"stop":1666030683230,"duration":1092}}]},"tags":[]},"source":"e316cdae7e54d742.json","parameterValues":["-1"]}