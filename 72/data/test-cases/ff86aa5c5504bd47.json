{"uid":"ff86aa5c5504bd47","name":"test_front_change_opacity_up_down[1]","fullName":"tests.gui.test_front#test_front_change_opacity_up_down","historyId":"0681efab2c346ab7979909e181f79c01","time":{"start":1666105799951,"stop":1666105800506,"duration":555},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, up_down = 1\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window opacity changes by wheel')\n    @pytest.mark.parametrize(\"up_down\", [-1, 1])\n    def test_front_change_opacity_up_down(setup, up_down):\n    \n        with allure.step(\"Change opacity to -1\"):\n            pyautogui.scroll(-1)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Scroll\"):\n            pyautogui.scroll(up_down)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F1692B0>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F062BB0>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1666105798841,"stop":1666105799948,"duration":1107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup = None, up_down = 1\n\n    @allure.feature('Test front')\n    @allure.story('Check that the window opacity changes by wheel')\n    @pytest.mark.parametrize(\"up_down\", [-1, 1])\n    def test_front_change_opacity_up_down(setup, up_down):\n    \n        with allure.step(\"Change opacity to -1\"):\n            pyautogui.scroll(-1)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_1 = pyautogui.screenshot(screenshots[0],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_1)\n    \n        with allure.step(\"Scroll\"):\n            pyautogui.scroll(up_down)\n    \n        with allure.step(\"Take a screenshot\"):\n            img_2 = pyautogui.screenshot(screenshots[1],\n                                         region=p.DEFAULT_APP_REGION)\n            allure_attach_screenshot(img_2)\n    \n        with allure.step(\"Compare screenshots\"):\n>           assert_screenshots(img_1, img_2, False)\n\ntests/gui/test_front.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/methods/utils.py:44: in assert_screenshots\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npicture_1 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F1692B0>\npicture_2 = <PIL.Image.Image image mode=RGB size=640x480 at 0x7FB54F062BB0>\nsame = False\n\n    def assert_screenshots(picture_1: Image.Image,\n                           picture_2: Image.Image,\n                           same: bool) -> Optional[NoReturn]:\n        \"\"\" Assert screenshots pair and remove them \"\"\"\n        try:\n            with io.BytesIO() as fp:\n                picture_1.save(fp, format='PNG')\n                picture_1_raw = fp.getvalue()\n            with io.BytesIO() as fp:\n                picture_2.save(fp, format='PNG')\n                picture_2_raw = fp.getvalue()\n>           assert (picture_1_raw == picture_2_raw) is same\nE           AssertionError\n\ntests/methods/utils.py:42: AssertionError","steps":[{"name":"Change opacity to -1","time":{"start":1666105799951,"stop":1666105800053,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105800053,"stop":1666105800221,"duration":168},"status":"passed","steps":[],"attachments":[{"uid":"115bac8b2b540b85","name":"Screenshot","source":"115bac8b2b540b85.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Scroll","time":{"start":1666105800222,"stop":1666105800323,"duration":101},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Take a screenshot","time":{"start":1666105800323,"stop":1666105800489,"duration":166},"status":"passed","steps":[],"attachments":[{"uid":"137e9c19ff2f6336","name":"Screenshot","source":"137e9c19ff2f6336.png","type":"image/png","size":4681}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true},{"name":"Compare screenshots","time":{"start":1666105800490,"stop":1666105800505,"duration":15},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/gui/test_front.py\", line 85, in test_front_change_opacity_up_down\n    assert_screenshots(img_1, img_2, False)\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 44, in assert_screenshots\n    raise e\n  File \"/home/runner/work/mic_spectrum_analyser/mic_spectrum_analyser/tests/methods/utils.py\", line 42, in assert_screenshots\n    assert (picture_1_raw == picture_2_raw) is same\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":5,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1666105800515,"stop":1666105800515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"Test front"},{"name":"story","value":"Check that the window opacity changes by wheel"},{"name":"parentSuite","value":"tests.gui"},{"name":"suite","value":"test_front"},{"name":"host","value":"fv-az278-55"},{"name":"thread","value":"2977-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.gui.test_front"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"up_down","value":"1"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"90f745d4585b3e24","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/71//#testresult/90f745d4585b3e24","status":"failed","statusDetails":"AssertionError","time":{"start":1666104548656,"stop":1666104549192,"duration":536}},{"uid":"4ca44e4e5a3bedae","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/69//#testresult/4ca44e4e5a3bedae","status":"failed","statusDetails":"AssertionError","time":{"start":1666104165363,"stop":1666104165844,"duration":481}},{"uid":"3f767041af9eb276","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/67//#testresult/3f767041af9eb276","status":"passed","time":{"start":1666031138011,"stop":1666031139943,"duration":1932}},{"uid":"d85e69b7bfe0e811","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/66//#testresult/d85e69b7bfe0e811","status":"passed","time":{"start":1666030983488,"stop":1666030984992,"duration":1504}},{"uid":"866cd7bd10487576","reportUrl":"https://dmncmn.github.io/mic_spectrum_analyser/65//#testresult/866cd7bd10487576","status":"passed","time":{"start":1666030684462,"stop":1666030685829,"duration":1367}}]},"tags":[]},"source":"ff86aa5c5504bd47.json","parameterValues":["1"]}